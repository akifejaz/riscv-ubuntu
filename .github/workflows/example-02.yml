# This workflow tests your application in a RISC-V Ubuntu environment using QEMU
# 
# What this does:
# - Starts a qemu-system-riscv64 Ubuntu container
# - Waits for the system to boot completely
# - Provides helper functions to send commands to the guest system
# - Runs your custom tests inside the RISC-V environment
#
# Documentation: https://github.com/cloudv10x/riscv-qemu-ubuntu

name: Testing on RISC-V Ubuntu # running by qemu-system-riscv64

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  qemu-system-riscv64-ubuntu:
    runs-on: ubuntu-latest

    # Job-level env (used by steps; NOT by container.options)
    env:
      CONTAINER_NAME: riscv-test
      WORK_DIR: ${{ github.workspace }}
      LOG_DIR: ${{ github.workspace }}/var/log/qemu
      CONSOLE_LOG: ${{ github.workspace }}/var/log/qemu/console.log
      GUEST_FIFO: /var/log/qemu/guest.in

    container:
      image: cloudv10x/riscv-qemu-ubuntu:latest
      # container.options is resolved before env; use github.* only or literals
      options: >-
        --name riscv-test
        --privileged
        -v ${{ github.workspace }}:/workspace
        -v ${{ github.workspace }}/var/log/qemu:/var/log/qemu
        -e AUTO_ATTACH=0
        -e RUN_TESTS=0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare log directories
        run: |
          set -euo pipefail
          mkdir -p "${LOG_DIR}"
          chmod 755 "${LOG_DIR}"
          # pull common functions (now that repo is checked out)
          chmod +x "${GITHUB_WORKSPACE}/.github/scripts/common.sh"
          echo "BASH_ENV=${GITHUB_WORKSPACE}/.github/scripts/common.sh" >> "$GITHUB_ENV"

      - name: Confirm job container is up (no docker ps needed)
        run: |
          set -euo pipefail
          echo "Hostname: $(hostname)"
          echo "Verifying mounts..."
          test -d /workspace && echo "OK /workspace"
          test -d /var/log/qemu && echo "OK /var/log/qemu"
          echo "Listing /var/log/qemu:"
          ls -alh /var/log/qemu || true

      - name: Wait for QEMU system boot
        timeout-minutes: 10
        run: |
          set -euo pipefail
          wait_for_qemu_boot "${CONTAINER_NAME}" "${CONSOLE_LOG}" 600 5
          GUEST_DETAILS="${CONTAINER_NAME} ${GUEST_FIFO} ${CONSOLE_LOG}"
          echo "GUEST_DETAILS=${GUEST_DETAILS}" >> "$GITHUB_ENV"
