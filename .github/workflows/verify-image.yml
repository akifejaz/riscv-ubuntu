name: RISC-V QEMU Ubuntu Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-riscv-qemu:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create log directories and workspace
      run: |
        mkdir -p ${{ github.workspace }}/var/log/qemu
        mkdir -p ${{ github.workspace }}/workspace
        chmod 755 ${{ github.workspace }}/var/log/qemu
        chmod 755 ${{ github.workspace }}/workspace

    - name: Pull RISC-V QEMU Ubuntu image
      run: |
        docker pull cloudv10x/riscv-qemu-ubuntu:latest
        docker images cloudv10x/riscv-qemu-ubuntu:latest

    - name: Start RISC-V QEMU container
      id: start-container
      run: |
        # Start container in detached mode with TTY
        CONTAINER_ID=$(docker run -d -t \
          --name riscv-test \
          --privileged \
          -v ${{ github.workspace }}/workspace:/workspace \
          -v ${{ github.workspace }}/var/log/qemu:/var/log/qemu \
          -e AUTO_ATTACH=0 \
          cloudv10x/riscv-qemu-ubuntu:latest)
        
        echo "container_id=$CONTAINER_ID" >> $GITHUB_OUTPUT
        echo "Started container: $CONTAINER_ID"
        
        # Verify container is running
        docker ps --filter "name=riscv-test"

    - name: Wait for QEMU boot and discover guest PTY
      timeout-minutes: 12
      run: |
        echo "Waiting for QEMU to boot and discovering guest serial PTY..."
        
        # Wait for QEMU process to start
        echo "Waiting for QEMU process..."
        for i in $(seq 1 120); do
          if ! docker ps --format '{{.Names}}' | grep -q '^riscv-test$'; then
            echo "Container exited early!"
            docker logs riscv-test || true
            exit 1
          fi
          
          QEMU_PID=$(docker exec riscv-test sh -c 'pgrep -x qemu-system-riscv64 | head -n1' 2>/dev/null || true)
          if [ -n "${QEMU_PID:-}" ]; then
            echo "QEMU process found with PID: $QEMU_PID"
            break
          fi
          
          echo "Attempt $i/120 - QEMU not ready yet..."
          sleep 3
        done
        
        if [ -z "${QEMU_PID:-}" ]; then
          echo "ERROR: QEMU process not found after timeout"
          docker logs riscv-test || true
          exit 1
        fi
        
        # Discover guest serial PTY
        echo "Discovering guest serial PTY..."
        
        # Method 1: Check QEMU process file descriptors for PTY
        PTY=$(docker exec riscv-test sh -c \
          "ls -l /proc/$QEMU_PID/fd 2>/dev/null | grep 'pts/' | awk '{print \$NF}' | tail -n1" || true)
        
        if [ -n "$PTY" ] && docker exec riscv-test sh -c "[ -c '$PTY' ]"; then
          echo "GUEST_PTY=$PTY" >> $GITHUB_ENV
          echo "Found PTY via /proc: $PTY"
        else
          # Method 2: Parse from boot log
          echo "Trying to find PTY from boot log..."
          sleep 5
          PTY=$(docker exec riscv-test sh -c \
            "grep -oE 'char device redirected to (/dev/pts/[0-9]+)' /var/log/qemu/qemu.boot.log 2>/dev/null | awk '{print \$5}' | tail -n1" || true)
          
          if [ -n "$PTY" ] && docker exec riscv-test sh -c "[ -c '$PTY' ]"; then
            echo "GUEST_PTY=$PTY" >> $GITHUB_ENV
            echo "Found PTY via boot log: $PTY"
          else
            echo "ERROR: Could not discover guest serial PTY"
            echo "=== Boot Log ==="
            docker exec riscv-test cat /var/log/qemu/qemu.boot.log || true
            exit 1
          fi
        fi
        
        # Wait for boot completion indicators
        echo "Waiting for Ubuntu boot completion..."
        for i in $(seq 1 180); do
          # Check for boot ready messages
          if docker exec riscv-test sh -c \
            "grep -qE 'RISC-V Ubuntu image is ready|Ubuntu.*ttyS0|cloud-init.*finished|login:' /var/log/qemu/console.log 2>/dev/null"; then
            echo "Boot completion detected!"
            break
          fi
          
          if [ $i -eq 180 ]; then
            echo "Boot completion timeout - continuing anyway..."
          fi
          
          sleep 2
        done

    - name: Test guest system via serial console
      timeout-minutes: 8
      run: |
        echo "Testing guest system via PTY: $GUEST_PTY"
        
        # Helper function to send commands to guest
        send_cmd() {
          local cmd="$1"
          local desc="$2"
          echo "--- $desc ---"
          # Send command and wait for output
          docker exec riscv-test sh -c "printf '%s\r\n' '$cmd' > $GUEST_PTY"
          sleep 3
          # Read recent console output
          docker exec riscv-test sh -c "timeout 5 cat $GUEST_PTY" 2>/dev/null || true
          echo
        }
        
        # Ensure we have shell prompt (send Enter)
        echo "Ensuring shell prompt..."
        docker exec riscv-test sh -c "printf '\r\n' > $GUEST_PTY"
        sleep 2
        
        # Send system information commands
        send_cmd "echo '=== System Information ==='" "Header"
        send_cmd "uname -a" "Kernel Information"
        send_cmd "lscpu" "CPU Information"
        send_cmd "free -h" "Memory Information"
        send_cmd "nproc" "CPU Core Count"
        send_cmd "cat /proc/meminfo | head -10" "Detailed Memory"
        send_cmd "df -h /" "Disk Usage"
        send_cmd "uptime" "System Uptime"
        send_cmd "cat /etc/os-release | head -5" "OS Release"
        send_cmd "whoami" "Current User"
        send_cmd "pwd" "Working Directory"
        
        # Test workspace access
        send_cmd "ls -la /workspace" "Workspace Contents"
        send_cmd "echo 'RISC-V Test Success' > /workspace/test_output.txt" "Workspace Write Test"
        send_cmd "cat /workspace/test_output.txt" "Workspace Read Test"
        
        # Give time for final outputs
        sleep 3

    - name: Capture final console output
      if: always()
      run: |
        echo "=== Final Console Output ==="
        if [ -n "${GUEST_PTY:-}" ]; then
          docker exec riscv-test sh -c "timeout 10 cat $GUEST_PTY" 2>/dev/null || true
        fi

    - name: Display logs and diagnostics
      if: always()
      run: |
        echo "=== Container Status ==="
        docker ps -a --filter "name=riscv-test"
        
        echo "=== Mounted Log Directory ==="
        ls -la ${{ github.workspace }}/var/log/qemu/ || echo "Log directory not found"
        
        echo "=== QEMU Boot Log (last 50 lines) ==="
        if [ -f "${{ github.workspace }}/var/log/qemu/qemu.boot.log" ]; then
          tail -n 50 "${{ github.workspace }}/var/log/qemu/qemu.boot.log"
        else
          echo "Boot log not found in mounted directory, checking container..."
          docker exec riscv-test tail -n 50 /var/log/qemu/qemu.boot.log 2>/dev/null || echo "Boot log not accessible"
        fi
        
        echo "=== Console Log (last 50 lines) ==="
        if [ -f "${{ github.workspace }}/var/log/qemu/console.log" ]; then
          tail -n 50 "${{ github.workspace }}/var/log/qemu/console.log"
        else
          echo "Console log not found in mounted directory, checking container..."
          docker exec riscv-test tail -n 50 /var/log/qemu/console.log 2>/dev/null || echo "Console log not accessible"
        fi
        
        echo "=== Container Logs (last 100 lines) ==="
        docker logs --tail 100 riscv-test 2>&1 || echo "Could not get container logs"
        
        echo "=== Workspace Test File ==="
        cat ${{ github.workspace }}/workspace/test_output.txt 2>/dev/null || echo "Test output file not found"

    - name: Detailed failure diagnostics
      if: failure()
      run: |
        echo "=== FAILURE DIAGNOSTICS ==="
        
        echo "=== Full Container Logs ==="
        docker logs riscv-test 2>&1 || true
        
        echo "=== Full Boot Log ==="
        docker exec riscv-test cat /var/log/qemu/qemu.boot.log 2>/dev/null || true
        
        echo "=== Full Console Log ==="  
        docker exec riscv-test cat /var/log/qemu/console.log 2>/dev/null || true
        
        echo "=== Container Processes ==="
        docker exec riscv-test ps aux 2>/dev/null || true
        
        echo "=== Container File System ==="
        docker exec riscv-test ls -la /opt/riscv-vm/ 2>/dev/null || true
        docker exec riscv-test ls -la /var/log/qemu/ 2>/dev/null || true

    - name: Upload logs and artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: riscv-qemu-logs
        path: |
          ${{ github.workspace }}/var/log/qemu/
          ${{ github.workspace }}/workspace/
        retention-days: 7

    - name: Cleanup
      if: always()
      run: |
        docker stop riscv-test 2>/dev/null || true
        docker rm riscv-test 2>/dev/null || true