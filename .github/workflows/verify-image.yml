name: RISC-V QEMU Ubuntu Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-riscv-qemu:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      CONTAINER_NAME: riscv-test
      LOG_DIR: ${{ github.workspace }}/var/log/qemu
      CONSOLE_LOG: ${{ github.workspace }}/var/log/qemu/console.log
      GUEST_FIFO: /var/log/qemu/guest.in

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare directories
        run: |
          set -euo pipefail
          mkdir -p "${LOG_DIR}"
          chmod 755 "${LOG_DIR}"

      - name: Pull RISC-V QEMU image
        run: |
          set -euo pipefail
          docker pull cloudv10x/riscv-qemu-ubuntu:latest

      - name: Start RISC-V QEMU container
        id: start-container
        run: |
          set -euo pipefail
          docker run -d \
            --name "${CONTAINER_NAME}" \
            --privileged \
            -v "${LOG_DIR}":/var/log/qemu \
            -e AUTO_ATTACH=0 \
            -e RUN_TESTS=0 \
            cloudv10x/riscv-qemu-ubuntu:latest
          
          echo "Container started: ${CONTAINER_NAME}"

      - name: Wait for QEMU boot
        timeout-minutes: 10
        run: |
          set -euo pipefail
          echo "Waiting for QEMU boot completion..."

          for i in $(seq 1 120); do
            if ! docker ps --format '{{.Names}}' | grep -qx "${CONTAINER_NAME}"; then
              echo "ERROR: Container stopped unexpectedly"
              docker logs "${CONTAINER_NAME}" --tail 100 || true
              exit 1
            fi

            # Grab a generous tail and strip CRs/ANSI noise just in case
            LOGS="$(docker logs "${CONTAINER_NAME}" 2>&1 | tail -n 200 | tr -d '\r')"

            # Accept either our explicit sentinel, or the interactive SHELL_READY as a backup
            if tail -n 50 "${CONSOLE_LOG}" | grep -qE "RISC-V Ubuntu image is ready."; then
              echo "✓ System ready (cloud-init sentinel seen)"
              exit 0
            fi
            if echo "${LOGS}" | grep -qE "System is ready for headless operation"; then
              echo "✓ System ready (shell sentinel seen)"
              exit 0
            fi

            # Progress ping
            if [ $((i % 20)) -eq 0 ]; then
              echo "Still booting... ($((i*5))s elapsed)"
            fi

            sleep 5
          done

          echo "ERROR: Boot timeout after 10 minutes"
          echo "=== Last 200 log lines ==="
          docker logs "${CONTAINER_NAME}" --tail 200 || true
          exit 1
          
      - name: Setup headless interface
        run: |
          set -euo pipefail
          
          # Verify PTY exists
          docker exec "${CONTAINER_NAME}" test -f /var/log/qemu/pty.path || {
            echo "ERROR: PTY path not found"
            exit 1
          }
          
          PTY_PATH="$(docker exec "${CONTAINER_NAME}" cat /var/log/qemu/pty.path)"
          echo "Guest PTY: ${PTY_PATH}"
          
          # Create FIFO if missing
          docker exec "${CONTAINER_NAME}" bash -c '
            [ -p /var/log/qemu/guest.in ] || mkfifo /var/log/qemu/guest.in
            chmod 666 /var/log/qemu/guest.in
          '
          
          # Start FIFO->PTY bridge
          docker exec -d "${CONTAINER_NAME}" bash -c '
            PTY="$(cat /var/log/qemu/pty.path)"
            while true; do
              [ -p /var/log/qemu/guest.in ] && [ -c "${PTY}" ] && \
                cat /var/log/qemu/guest.in > "${PTY}" || sleep 1
            done
          ' 2>/dev/null
          
          sleep 2
          
          # Verify bridge is running
          docker exec "${CONTAINER_NAME}" pgrep -f "cat /var/log/qemu/guest.in" >/dev/null || {
            echo "WARNING: Bridge process not detected"
          }
          
      - name: Test bridge connection
        run: |
          set -euo pipefail
          
          send_cmd() {
            docker exec "${CONTAINER_NAME}" bash -c "printf '%s\n' \"$1\" > '${GUEST_FIFO}'"
          }
          
          PROBE="__TEST_$(date +%s)__"
          send_cmd "echo ${PROBE}"
          sleep 2
          
          if docker exec "${CONTAINER_NAME}" grep -q "${PROBE}" /var/log/qemu/console.log; then
            echo "✓ Bridge operational"
          else
            echo "ERROR: Bridge test failed"
            exit 1
          fi

      - name: Run system tests
        timeout-minutes: 5
        run: |
          set -euo pipefail
          send_cmd() {
            docker exec "${CONTAINER_NAME}" bash -c "printf '%s\n' \"$1\" > '${GUEST_FIFO}'"
          }
          run_test() {
            local cmd="$1"
            local timeout="${2:-30}"
            
            echo "→ ${cmd}"
            
            local uid="$(date +%s%N)-$RANDOM"
            local START="__START_${uid}__"
            local END="__END_${uid}__"
            
            local wrapped="{ echo ${START}; ${cmd}; echo ${END}; } 2>&1"
            
            timeout ${timeout}s tail -n0 -F "${CONSOLE_LOG}" 2>/dev/null | \
              awk -v s="${START}" -v e="${END}" '
                BEGIN { active=0 }
                { 
                  if (index($0, s)) { active=1; next }
                  if (index($0, e)) { exit 0 }
                  if (active) print
                }
              ' &
            local awk_pid=$!
            
            sleep 0.3
            send_cmd "${wrapped}"
            
            wait "${awk_pid}" 2>/dev/null || true
            echo ""
          }
          
          echo "=== System Information ==="
          run_test "uname -a"
          run_test "whoami"
          run_test "cat /etc/os-release | grep -E '^(NAME|VERSION_ID)='"
          
          echo "=== Hardware Info ==="
          run_test "nproc"
          run_test "free -h | grep Mem"
          run_test "df -h / | tail -1"
          
          echo "=== Workspace Test ==="
          run_test "mkdir -p /tmp/test && echo 'GitHub Actions Test' > /tmp/test/output.txt"
          run_test "cat /tmp/test/output.txt"
          
          echo "✓ All tests completed"

      - name: Capture diagnostics
        if: failure()
        run: |
          echo "=== Failure Diagnostics ==="
          echo "Container status:"
          docker ps -a --filter "name=${CONTAINER_NAME}"
          
          echo -e "\n=== Last 100 console lines ==="
          docker exec "${CONTAINER_NAME}" tail -n 100 /var/log/qemu/console.log 2>/dev/null || \
            echo "Console log unavailable"
          
          echo -e "\n=== Container logs ==="
          docker logs --tail 50 "${CONTAINER_NAME}" 2>&1 || echo "Container logs unavailable"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: riscv-qemu-logs
          path: ${{ github.workspace }}/var/log/qemu/
          retention-days: 3
          if-no-files-found: warn

      - name: Cleanup
        if: always()
        run: |
          docker stop "${CONTAINER_NAME}" 2>/dev/null || true
          docker rm "${CONTAINER_NAME}" 2>/dev/null || true